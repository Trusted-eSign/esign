// tslint:disable:max-line-length

export default {
  About: {
    About: "ABOUT THE PROGRAM",
    AppCoreVersion: "The kernel version of the application:",
    AppVersion: "Version",
    CSPVersion: "CryptoPro CSP:",
    Compatible: "(compatibility with Electron 1.6.6, OpenSSL 1.0.2k)",
    Contacts: "Contacts",
    CspVersion: "CryptoProviders",
    FeedBack: "FEEDBACK",
    Info: "Information",
    about: "About the program",
    about_programm: "Application Trusted eSign is designed to create electronic signature and file encryption using digital certificates and cryptographic algorithms",
    address: "Petrova St, 1, Yoshkar-Ola, Mari El Republic, Russia, 424033",
    build_number: "Build number",
    company_name: "Company Cifrovie Technologii",
    copyright: "© 2016-2019",
    developer: "Company-developer",
    email: "Email",
    error_message_send: "Message failed to send",
    feedback_description: "Report developers about any problems or suggest ideas for improving the program",
    info: "info@trusted.plus",
    info_about_certificate: "Centralized management of local and cloud-based certificate storages",
    info_about_encrypt: "Protection of your documents and any other content by using encryption to address one or more recipients",
    info_about_product: "Trusted eSign is a desktop app that allows you to sign documents and encrypt files using digital certificates and cryptographic algorithms.",
    info_about_sign: "Sign any type of document files and other content",
    link_facebook: "https://www.facebook.com/cryptoarm/",
    link_trusred: "http://www.trusted.ru/",
    link_twitter: "https://twitter.com/cryptoarm",
    link_vk: "http://vk.com/cryptoarm",
    message: "Message",
    message_send: "The message is sent",
    phone: {
      number_one: "+7 (8362) 33-70-50",
      number_three: "+7 (800) 555-65-81",
      number_two: "+7 (499) 705-91-10",
    },
    product_NAME: "Trusted eSign",
    product_name: "Trusted eSign",
    send: "Send",
    username: "Name",
    version: "1.5.2",
    version_app: "Application version",
    version_full: "Version: 1.5.2",
  },
  Agreement: {
    Agreement: "AGREEMENT",
    agreement: "Agreement",
  },
  Algorithm: {
    id_Gost28147_89: "GOST 28147-89",
    id_GostR3410_2001: "GOST R 34.10-2001",
    id_GostR3410_94: "GOST R 34.10-94",
    id_GostR3411_94: "GOST R 34.11-94",
    id_GostR3411_94_with_GostR3410_2001: "GOST R 34.11/34.10-2001",
    id_GostR3411_94_with_GostR3410_94: "GOST R 34.11/34.10-94",
    id_tc26_gost3410_12_256: "GOST R 34.10-2012 256 bit",
    id_tc26_gost3410_12_512: "GOST R 34.10-2012 512 bit",
    id_tc26_gost3411_12_256: "GOST R 34.11-2012 256 bit",
    id_tc26_gost3411_12_512: "GOST R 34.11-2012 512 bit",
    id_tc26_signwithdigest_gost3410_12_256: "GOST R 34.11-2012/34.10-2012 256 bit",
    id_tc26_signwithdigest_gost3410_12_512: "GOST R 34.11-2012/34.10-2012 512 bit",
  },
  CRL: {
    authorityKeyid: "Authority key id",
    crlNumber: "CRL number",
    crl_delete_failed: "The CRL delete failed",
    crl_delete_ok: "The CRL is successfully deleted",
    crl_export: "Export",
    crl_export_cancel: "Cancel the CRL export",
    crl_export_failed: "The CRL export failed",
    crl_export_ok: "The CRL is successfully exported",
    crl_import_failed: "The CRL import failed",
    crl_import_ok: "The CRL successfully imported",
    crls: "CRLs",
    delete_crl: "Delete CRL",
    export_crl: "Export the CRL",
    lastUpdate: "Last update",
    nextUpdate: "Next update",
    realy_delete_crl: "You really want delete CRL?",
  },
  CSR: {
    algorithm: "Algorithm",
    common_name: "CN",
    container: "Сontainer (will generated)",
    country: "Country",
    create_request: "Create request",
    create_request_created: "Certificate request was successfully created",
    create_selfSigned: "Create self-signed certificate",
    csp_label: "Cryptography service provider",
    csp_microsoft_base: "Microsoft Base Cryptografic Provaider v1.0",
    csp_openssl: "OpenSSL RSA",
    eku_clientAuth: "Client authentication",
    eku_codeSigning: "Code signing",
    eku_emailProtection: "Email protection",
    eku_serverAuth: "Server authentication",
    email_address: "Email Address",
    exportable_key: "Mark private keys as exportable",
    extKeyUsage: "Extended key usage",
    fill_required_fields: "Fill out the required fields",
    generate_new_key: "Create new key pair",
    go_to_csr_folder: "Go to folder",
    inn: "INN",
    key_generation_error: "Error generation key pair",
    key_length: "Key length",
    key_usage: "Key usage",
    key_usage_cRLSign: "CRL sign",
    key_usage_dataEncipherment: "Data encipherment",
    key_usage_decipherOnly: "Decipher only",
    key_usage_digitalSignature: "Digital signature",
    key_usage_encipherOnly: "Encipher only",
    key_usage_encrypt: "Data encipherment",
    key_usage_group: "Key usage group",
    key_usage_keyAgreement: "Key agreement",
    key_usage_keyCertSign: "Certificate sign",
    key_usage_keyEncipherment: "Key encipherment",
    key_usage_nonRepudiation: "Nonrepudiation",
    key_usage_sign: "Digital signature",
    key_usage_sign_encrypt: "Digital signature and data encipherment",
    keys_params: "Key parameters",
    locality_name: "Locality Name (eg, city)",
    not_after: "Valid not after",
    ogrnip: "OGRNIP",
    organization_name: "Organization Name (eg, company)",
    organizational_unit_name: "Organizational unit name",
    province_name: "State or Province Name (full name)",
    snils: "SNILS",
    subject_params: "Subject parameters",
    template_additional_fields: "Template with additional fields",
    template_default: "Default template",
    template_kep_fiz: "Сертификат КЭП физичексого лица",
    template_kep_ip: "Сертификат КЭП индивидуального предпринимателя",
    template_label: "Certificate template",
    title: "Position",
  },
  Certificate: {
    Certificate: "CERTIFICATES",
    FCertificates: "MANAGMENT",
    Select_Cert_Encrypt: "SELECT THE RECIPIENT'S CERTIFICATE",
    Select_Cert_Sign: "SELECT THE SIGNATURE CERTIFICATE",
    absent: "Private key is absent",
    cert: "Certificates",
    cert_chain: "Certificate hierarchy",
    cert_chain_info: "Certificate chain info",
    cert_chain_status: "Certificate chain status",
    cert_chain_status_false: "not valid",
    cert_chain_status_true: "valid",
    cert_delete_failed: "The certificate delete failed",
    cert_delete_ok: "The certificate is successfully deleted",
    cert_export: "Export the certificate",
    cert_export_cancel: "Cancel the certificate export",
    cert_export_failed: "The certificate export failed",
    cert_export_ok: "The certificate is successfully exported",
    cert_import: "Import the certificate",
    cert_import_failed: "The certificate import failed",
    cert_import_from_file: "Import from file",
    cert_import_ok: "The certificate is successfully imported",
    cert_imported: "The certificate is already imported",
    cert_info: "Certificate information",
    cert_load_failed: "The certificate file cannot be read",
    cert_not_found: "The certificate is not found",
    cert_not_select: "A certificate is not selected",
    cert_status_false: "not valid",
    cert_status_true: "valid",
    cert_trusted_import_failed: "The trusted certificate import failed",
    cert_trusted_import_ok: "The trusted certificate is successfully imported",
    cert_valid: "Is valid until",
    certificate: "A certificate",
    certs: "Certificates",
    certs_encrypt: "Encryption certificates",
    certs_getters: "The recipients' certificates",
    certs_intermediate: "Intermediate certificates",
    certs_my: "Personal Certificates",
    certs_other: "Other user certificates",
    certs_request: "Certificate Enrollment Request",
    certs_root: "Trusted Root Certificates",
    certs_token: "External token/card certificates",
    delete_certificate: "Delete certificate",
    export_cert: "Export the certificate",
    import_key: "Import the key",
    issuer: "Certificate Authority",
    issuer_name: "Issuer",
    key_import_failed: "Key import failed",
    key_import_ok: "The key is attached to the certificate",
    organization: "Organization",
    present: "Private key is present",
    priv_key: "Private key",
    public_key_algorithm: "Public key algorithm",
    realy_delete_certificate: "You really want delete certificate?",
    serialNumber: "Serial number",
    signature_digest_algorithm: "Signature digest algorithm",
    subject: "Certificate owner",
    thumbprint: "Thumbprint",
    version: "Version",
  },
  CloudCSP: {
    auth: "Authorization server",
    cert_import_from_cloudCSP: "Import from DSS",
    certificates_import_fail: "One or more certificates from DSS was not imported",
    certificates_import_success: "Certificates from DSS successfully imported",
    cloudCSP: "Cloud CSP",
    no_installed_csp5: "Only for CryptoPro CSP 5",
    request_error: "Request error",
    rest: "DSS server",
  },
  Common: {
    Back: "Back",
    add_all_files: "Add files from all the subfolders?",
    add_files: "Add files",
    apply: "Apply",
    back: "Back",
    cancel: "Cancel",
    clear: "Clear",
    close: "Close",
    copy: "Copy",
    delete: "Delete",
    en: "English",
    error: "ERROR",
    exit: "EXIT",
    files_not_found: "Files are not found: perhaps they were removed or renamed",
    goOver: "Go over",
    next: "Next",
    no: "No",
    or: "or",
    product: "Product",
    read_file_error: "Reading from the file error",
    ready: "Ready",
    reset: "Reset",
    ru: "Russian",
    subject: "Owner",
    update: "Update",
    update_list: "Update list",
    write_file_error: "Error: write file",
    yes: "Yes",
  },
  Containers: {
    Containers: "CONTAINERS",
    certificateInfo: "Certificate information",
    contNotSelected: "Container not selected",
    container_delete_failed: "The container delete failed",
    container_delete_ok: "The container is successfully deleted",
    containers: "Containers",
    containersNotFound: "Containers not found",
    delete_container: "delete container by certificate (not recomended)",
    installCertificate: "Install certificate",
    invalid_character: "Invalid character",
  },
  Csp: {
    cpcspPKZIVersion: "CryptoPro CSP product version",
    cpcspSKZIVersion: "CryptoPro CSP SKZI version",
    cspErr: "Error check CSP parameters",
    libcapi: "Cannot find libcapi. Install CryptoPro CSP",
    noCPLicense: "Error check license for CryptoPro CSP",
    noProvider2001: "GOST 2001 provider not available",
    noProvider2012: "GOST 2012 provider not available",
  },
  Diagnostic: {
    close: "Close",
    header: "Application Diagnostics",
    problem_header: "Problems detected",
    resolve_header: "Solutions",
  },
  Documents: {
    Documents: "DOCUMENTS",
    date: "Date",
    delete_documents: "Delete documents",
    docmenu_arhiver: "Arhiver",
    docmenu_dectypt: "Decrypt",
    docmenu_enctypt: "Encrypt",
    docmenu_remove: "Remove",
    docmenu_removesign: "Remove sign",
    docmenu_sign: "Sign",
    docmenu_verifysign: "Verify sign",
    documents: "Documents",
    documents_arhive: "Create arhive of documents is name ",
    documents_deleted1: "Removed documents ( files: ",
    documents_deleted2: " )",
    encrypted_files: "Encrypted files",
    filename: "Filename",
    filesize: "Size",
    filesize_from: "File size from",
    filesize_to: "File size to",
    go_to_documents_folder: "Go to folder",
    mdate: "Modified date",
    realy_delete_documents: "You really want delete selected documents?",
    save_to_documents: "Save to Documents",
    selected_all: "Selected all",
    signed_files: "Signed files",
    type: "Type",
  },
  Encrypt: {
    Encrypt: "ENCRYPT",
    Encryption: "FILES",
    archive_files_before: "Archive files before encryption",
    archive_name: "encrypt_files.zip",
    decrypt: "Decrypt",
    decrypt_key_failed: "The private key is not found",
    delete_files_after: "Delete files after encryption",
    encrypt: "Encrypt",
    encrypt_and_decrypt: "Encrypt / Decrypt",
    encrypt_setting: "Encryption settings",
    files_archived: "The files are archived",
    files_archived_failed: "File archivation failed ",
    files_decrypt: "The files are decrypted",
    files_decrypt_failed: "Error load key",
    files_encrypt: "The files are encrypted",
    files_encrypt_failed: "File encryption failed",
    search_decrypt_cert_failed: "The decryption certificate is not found",
  },
  Events: {
    Operations_log: "OPERATIONS LOG",
    operations_log: "Operations log",
  },
  EventsFilters: {
    all: "All",
    certificate_generation: "Certificate generation",
    certificate_import: "Certificate import",
    crl_import: "CRL import",
    csr_generation: "CSR generation",
    date: "Date",
    decrypt: "Decrypt",
    delete_certificate: "Remove certificate",
    delete_container: "Remove container",
    encrypt: "Encrypt",
    level_all: "All",
    level_error: "Error",
    level_info: "Info",
    no_found_events: "No found events",
    pkcs12_import: "Import PKCS12",
    sign: "Sign",
    unsign: "Unsign",
    write_object_for_filter: "Write object for filter",
    write_user_name: "Write user name",
  },
  EventsTable: {
    date_and_time: "Date and time",
    goto_current_logfile: "Go to the current log",
    load_archive_logfile: "Load archive operations log",
    no_rows: "No rows",
    operation: "Operation",
    operation_object: "Operation object",
    operation_result: "Operation result",
    search_in_doclist: "Search in documents list",
    search_in_table: "Search in operations log",
    status: "Status",
    user_name: "User",
  },
  Export: {
    export: "Export",
    export_certificate: "Export certificate",
    export_crl_format_base64: "Base-64 encoded X509_CRL (.CRL)",
    export_crl_format_der: "DER encoded binary X509_CRL (.CRL)",
    export_format: "Export file format",
    export_format_base64: "Base-64 encoded X509 (.CER)",
    export_format_der: "DER encoded binary X509 (.CER)",
    export_format_pkcs12: "Personal information exchange PKCS#12 (PFX)",
    export_params: "Export parameters",
    export_private_key: "Export private key",
    export_private_key_with_certificate: "Export the private key with the certificate",
    export_set_encoding: "Choose encoding for use in output file",
    export_set_password: "Protect the private key by using a password",
    no_export_private_key: "No export private key",
  },
  Filters: {
    filters_settings: "Filters settings",
  },
  Help: {
    Header1: "REFERENCE HELP BY THE TRUSTED ESIGN PROGRAM",
    Header2: "CONTENT OF THE REFERENCE HELP",
    Header3: "1. GETTING STARTED WITH THE APPLICATION. INTERFACE OF THE MAIN WINDOW",
    Header4: "2. MASTER OF LICENSE INSTALLATION",
    Header5: "3. MASTER OF CREATION / ELECTRONIC SIGNATURE CHECKS",
    Header6: "4. MASTER OF ENCRYPTION / DISCRIPTION OF FILES",
    Header7: "5. MASTER OF CERTIFICATES MANAGEMENT AND KEYS",
    Help: "HELP",
    Important: "Important!",
    Paragraf_1_1: "This help is a short reference on the interface of the Trusted eSign application and does not cover all the features of installation, configuration and operation.",
    Paragraf_1_2a: "The full version of the documentation for the software product can be obtained from the link",
    Paragraf_1_2b: "КриптоАРМ ГОСТ Руководство пользователя.pdf",
    Paragraf_1_3a: "Application Trusted eSign is a commercial product and for its full-fledged work it is necessary to purchase a license. You can get acquainted with the conditions of license acquisition in the online store ",
    Paragraf_1_3b: "КриптоАРМ.RU",
    Paragraf_2_1: "1. Getting started with the application. Main window interface",
    Paragraf_2_2: "2. The License Installation Wizard",
    Paragraf_2_3: "3. Wizard for creating / verifying an electronic signature",
    Paragraf_2_4: "4. Encryption / Encryption Wizard",
    Paragraf_2_5: "5. Certificate Management Wizard",
    Paragraf_3_1: "When you start the Trusted eSign application, the main application window appears, as shown in the figure below. In the main window there are buttons for navigating to the main application wizards: the wizard for creating / verifying an electronic signature, the encryption / decryption wizard, and the wizard for managing certificates of connected storage.",
    Paragraf_3_2: "In the title bar of the application there is a button for calling the side menu (the menu is shown in the figure to the right) and a button for switching the interface language. Using the application menu, you navigate to the main wizards and you can additionally access the page containing information about the program, the license installation wizard, and quick reference help.",
    Paragraf_3_3: "The main application window has a fixed size without the possibility of changing it. The application saves all global settings that were made by the user. Saving occurs when the application is closed. In the process of working with the application, the user's actions are also saved, executed by him in the wizards (selection of certificates, selection of files, etc.). When you go to another wizard (application page) and return to the application, you do not have to perform the same operations again.",
    Paragraf_4_1: "For the correct operation of the application, you must install a license for this software product. If, at the application startup, there are pop-up messages about the absence of a license expired in the license period, the impossibility of reading the license file, this indicates that the application will not correctly perform the operations of signing and decrypting files. The presence of a valid license for the application should be given special attention.",
    Paragraf_4_2: "To install the license and get information about it in the application there is a special wizard (shown in the figure below), which allows you to install a license from a file or clipboard. In either case, the license depends on the license.lic file and places it in the user's directory.",
    Paragraf_4_3a: "After the license has been successfully installed, the program must be restarted. If you receive messages like the following when entering a license for a software product: a non-correct license key, the license is not suitable for this program, the license has expired, then contact the technical support of the developer company (",
    Paragraf_4_3b: ").",
    Paragraf_5_1: "In the Trusted eSign application, there is a wizard in which the operations for creating an electronic signature for one or multiple files are performed. In the same wizard, you perform the operations for creating a file signature and checking signed files. The wizard page is shown in the figure below.",
    Paragraf_5_2: "The wizard page is divided into three areas. On the left is the selection area of the subscriber certificate. The certificate is selected from the dialog with the display of certificates from the repositories.",
    Paragraf_5_3: "In the dialog for selecting a subscriber certificate, only certificates from the Personal Certificates section that have a private key binding are displayed. Other certificates are not displayed and are not available for use in this wizard.",
    Paragraf_5_4: "To verify the signature, it is enough to select the files to be scanned - files with the extension .sig, which contain an electronic signature and click on the Check button. No additional manipulation is necessary when verifying the signature.",
    Paragraf_5_5: "If the source file is not found automatically when checking the signature file separated from the signature file, its selection will be offered. The result of checking signatures is displayed as a message.",
    Paragraf_5_6: "To view the files before creating a signature, you can use the context menu (see the figure below). The signature is checked for the selected files. The figure shows the result of checking the signature of one of the files. Additionally, you can remove the signature from the signed files. In this case, the original file is saved, and the signature is deleted.",
    Paragraf_6_1: "In the application Trusted eSign there is a wizard in which the operations of encryption and decryption of files are performed. To perform the encryption operation, the recipients of encrypted files are used as a list of certificates. Those users of the application who have a private key associated with one of the recipient certificates will be able to decrypt the files.",
    Paragraf_6_2: "The Encryption / Decryption Wizard is shown in the figure below. The wizard page is divided into three areas: on the left is the selection area of the recipient certificates, below are the settings for performing the operations and on the right is the selection area of the source files and the result display.",
    Paragraf_6_3: "When selecting the mode of deleting files after encryption, pay attention to providing access to encrypted files. To do this, you can add a personal certificate to the list of recipients, linked to a private key.",
    Paragraf_6_4: "The figure at the right shows the dialog for selecting recipient certificates. The list of available certificates displays all certificates from the connected stores. The certificates are grouped by tabs. In the dialog, a certificate search operation is available.",
    Paragraf_6_5: "In the wizard, you can modify the list of recipients and files by adding them. The encryption operation is performed only on a set of selected files. To view files before encryption, you can use the context menu (see the figure below).",
    Paragraf_6_6: "Decrypt files by clicking the Decrypt button. To successfully perform the operation, one of the connected storages must contain a private key that is linked to the recipient's certificate. Otherwise an error will be issued.",
    Paragraf_6_7: "If the files are successfully decrypted, the result is displayed in the same wizard and the files themselves are saved either next to the encrypted files or in the specified directory.",
    Paragraf_7_1: "To manage certificates and keys, a separate wizard has been added to the application. The wizard page displays tabs with certificates grouped into them. When you first start the application, you must have a test certificate and a key attached to it in the Personal Certificates tab.",
    Paragraf_7_2: "In order to import the new certificate into the repository, you can use the context menu - select the Import Certificate operation. In the dialog box that appears, select the certificate (BASE64 and DER encodings are supported) and the certificate is placed in the repository. ",
    Paragraf_7_3: "Import of certificates from the repositories of supported providers is carried out at the level of using additional utilities. The most common situations are explained in the User's Guide.",
    Work_App: "HOW THE APPLICATION WORKS",
    help: "Help",
    link_shop: "https://cryptoarm.ru/shop/trusted-esign",
    link_shop_name: " КриптоАРМ.RU",
    link_user_guide: "https://cryptoarm.ru/upload/docs/userguide-trusted-esign.pdf",
    link_user_guide_name: " Trusted eSign v.1.2.11 Руководство пользователя.pdf",
    video_failed: "This video cannot be played. Please check your Internet connection",
  },
  Key: {
    key_load_failed: "Error load key",
  },
  License: {
    About_License: "LICENSE INFORMATION",
    About_License_CSP: "CRYPTOPRO CSP LICENSE INFORMATION",
    Buy_license: "BUY LICENSE",
    Enter_Key: "ENTER THE KEY",
    Enter_license: "УСТАНОВИТЬ ЛИЦЕНЗИЮ",
    Entered: "ENTER",
    License: "LICENSE",
    License_overtimes: "INTERIM LICENSE",
    License_reques_send: "SEND REQUEST",
    License_request: "OBTAIN A TEMPORARY LICENSE",
    enter_key: "Enter the license",
    enter_key_csp: "Enter the license CryptoPro CSP",
    entered_the_key: "Enter the key",
    failed_key: "The license key is incorrect",
    failed_key_find: "The license key is not found",
    failed_match_key: "The license key file does not match the application",
    failed_validity_key: "The license key has expired",
    get_overtimes_license: "Obtaining a temporary license",
    jwtErrorCode: "Unknown error code",
    jwtErrorExpired: "The license expired",
    jwtErrorInternal: "The license checking internal error",
    jwtErrorLoad: "Loading license failed",
    jwtErrorNoLicenseInStore: "No find valid license for operation",
    jwtErrorOperation: "An unknown operation requested",
    jwtErrorParsing: "Can't parse license token info",
    jwtErrorProduct: "The license does not match the application",
    jwtErrorSign: "The license have invalid signature",
    jwtErrorStarted: "The license doesn't started",
    jwtErrorStoreIsLocked: "Load license was loked",
    jwtErrorStructure: "The license have invalid token info structure",
    jwtErrorTokenFormat: "The license token invalid format",
    jwtGetLicense: "For buy a license go to:",
    key: "The key",
    key_file_name: "desktopkey.lic",
    lic_file_choose: "Choose the license file",
    lic_file_not_found: "The license file is not found",
    lic_file_uncorrect: "The license file is not correct",
    lic_key_correct: "The license key is valid (Days left: ",
    lic_key_correct_days: "Error: license key is not correct",
    lic_key_setup: "The license key is successfully set up",
    lic_key_setup_fail: "The license key are not set up",
    lic_key_uncorrect: "The license key is not correct",
    lic_notafter: "Expiration date of the license",
    lic_notbefore: "Issue date of the license",
    lic_status: "The licence status",
    lic_unlimited: "Unlimited",
    license: "License",
    license_correct: "Correct",
    license_incorrect: "Incorrect",
    license_key: "The license key",
    license_request: "Request for a temporary license",
    link_buy_license: "https://cryptoarm.ru/shop/cryptoarm-gost",
    link_buy_license_csp: "https://cryptoarm.ru/shop/skzi-cryptopro-csp-4-0",
    overtimes_license: "In the absence of a permanent license, you can request a temporary license. The temporary license is issued for a period of 14 days and provides full-fledged work with the application.",
    overtimes_license_confirm: "To send a request for a temporary license for the Trusted eSign product, for a period of 14 days, fill out the form floor. A temporary license is issued once per workplace to familiarize yourself with all the features of the software product.",
    overtimes_license_error: "The request for obtaining a temporary license for the Trusted eSign product was rejected. Perhaps, for the email address you have already issued a license. To resolve this issue, please contact technical support at info@trusted.ru.",
    overtimes_license_ok: "A temporary license for the use of the Trusted eSign product was obtained. You can install it on the workstation. After installing the license, you must restart the application.",
    serial_number: "Serial number",
    Сlose: "CLOSE",
  },
  Problems: {
    problem_1: "There is no crypto provider CryptoPro CSP",
    problem_2: "There is no license for crypto provider CryptoPro CSP",
    problem_3: "There is no license for Trusted eSign",
    problem_4: "Could not check the parameters of crypto provider CryptoPro CSP",
    problem_5: "Certificates not linked to a key container",
    problem_6: "Trusted Crypto module is not loaded",
    resolve_1_1: "The system does not have the cryptoPro CSP crypto provider installed. The further operation of the application is impossible and the application will be closed.",
    resolve_1_2: "To solve this problem, install CryptoPro CSP version 5.0 and run the application again.",
    resolve_1_3: "Distribution of the crypto provider CryptoPro CSP can be downloaded from the official CryptoPro website",
    resolve_1_4: "Detailed instructions for installing CryptoPRO CSP on various platforms can be found in the product documentation, which is available at the link",
    resolve_2_1: "The system does not have the correct license for CryptoPro CSP, which is necessary for full-function operation of the application.",
    resolve_2_2: "To solve this problem, you can purchase a license for the product in the online store, accessible by reference ",
    resolve_2_3: "After purchasing a license, you can install it through the application interface",
    resolve_3_1: "In the application there is no installed license for the software product Crypto ARM GOST.",
    resolve_3_2: "Without a license, operations related to access to the key medium will not be performed. For example, the operation of signing and decrypting files. This problem is not critical and the application is functional with limited functionality.",
    resolve_3_3: "To solve this problem, you can purchase a license for the product in the online store, accessible by reference",
    resolve_3_4: "After purchasing a license, you can install it through the application interface",
    resolve_4_1: "When the application started, there were problems with reading the parameters of the detected CryptoPro CSP. The further operation of the application is impossible and the application will be closed.",
    resolve_4_2: "To solve this problem, you need to install the required version of the CryptoPro CSP crypto provider and start the application again.",
    resolve_4_3: "The CryptoPro installation procedure is described in the product documentation, which is available by reference ",
    resolve_5_1: "In the application there are no certificates linked to the key container. For full work in the mode of signing and decrypting files, you need to install certificates.",
    resolve_5_2: "To resolve this issue, install personal certificates in the steps described in the product documentation that is available by reference ",
    resolve_5_3: "If you have certificates on a token, you can set them with a link to the key container on the page ",
    resolve_5_4: "It is also possible to install certificates from DSS or generate self-signed certificates ones on the page ",
    resolve_5_4_1: "It is also possible generate self-signed certificates ones on the page ",
    resolve_6_1: "When you run Crypto ARM GOST, the Trusted Crypto module is not loaded.",
    resolve_6_2: "To solve this problem, open the application control panel and forward error messages displayed on the Console tab to the technical support.",
    resolve_6_3: "Detailed instructions on how to open the control panel under the required platform can be found in the product documentation that is available on the link ",
  },
  SVS: {
    application_name: "Application Name",
    hostname: "Hostname",
  },
  Services: {
    SERVICES: "SERVICES",
    Services: "Services",
    add: "Add",
    add_new_service: "Service",
    already_started: "Please wait other transaction",
    change: "Change",
    connect: "Connect",
    cryptopro_dss: "CryptoPro DSS",
    cryptopro_svs: "CryptoPro SVS 2.0",
    delete: "Delete",
    delete_service: "Delete service",
    description: "Description",
    displayed_text: "Displayed text",
    empty_services_list: "List of services is empty",
    get_sertificates: "Get certificates",
    info: "Information about service",
    invalid_character: "Invalid character",
    invalid_phone_number: "Invalid phone number",
    megafon: "Megafon",
    mobile_number: "Mobile number (Megafon)",
    mobile_number_already_exists: "Mobile number already exists",
    name: "Name",
    pin_code_for_container: "PIN code for container",
    realy_delete_service: "You really want delete service?",
    service_certificates: "Certificates",
    service_delete_ok: "Service was deleted",
    service_not_selected: "Service is not selected",
    service_settings: "Settings",
    service_type: "Type of service",
    services_list: "List of services",
    text: "Text",
    write_mobile_number: "Write mobile number, format +7XXXXXXXXXX",
    write_pin: "Write pin code for container (if not required, must be empty)",
    write_service_description: "Write service description",
    write_service_name: "Write service name",
    write_text: "Write text for show on mobile phone",
  },
  Settings: {
    BASE: "BASE-64",
    Control: "CERTIFICATES",
    DER: "DER",
    Datas: "ENCRYPTION",
    Digital: "DIGITAL",
    add_files: "Add files",
    choose: "Choose",
    choose_files: "Choose files",
    delete_file: "Delete the file from the list",
    directory_file_save: "Save the file to",
    drag_drop: "Drag and drop the files",
    email_error: "Email is not valid",
    encoding: "Encoding type",
    failed_find_directory: "The directory is not found",
    field_empty: "This field cannot be empty!",
    go_to_file: "Go to the file",
    open_file: "Open the file",
    pass_enter: "Enter the password",
    password: "Password",
    password_confirm: "Password confirm",
    pattern_failed: "Only latin letters, numbers or a special characters",
    print: "Print",
    remove_all_files: "Remove all listed files",
    remove_list: "Clear the list",
    remove_selected: "Delete selection",
    selected_all: "Select all",
    setting_file: "settings.json",
    settings: "Settings",
    wait: "Please wait",
    write_file_failed: "File saving error",
    write_file_ok: "The settings saved",
  },
  Sign: {
    Sign: "SIGN",
    Signature: "SIGNATURE",
    alg: "Signature algorithm",
    build_chain_failed: "Chain building failed",
    digest_alg: "Hash algorithm",
    documents_reviewed: "Documents were reviewed before sign",
    files_resigned: "The file is re-signed",
    files_resigned_exist: "The file is already re-signed. Select another certificate",
    files_resigned_failed: "File re-signing failed",
    files_signed: "The files are signed",
    files_signed_failed: "File signing failed",
    files_unsigned_detached: "Cannot unsign a detached signature",
    files_unsigned_failed: "Signature removal error",
    files_unsigned_ok: "The signature is successfully removed",
    key_not_found: "The key is not found",
    load_sign_failed: "Error load sign",
    resign: "Re-sign",
    set_content_failed: "Error: content not found",
    sign: "Sign",
    sign_and_verify: "Sign / Verify the signature",
    sign_content_file: "Sign content file",
    sign_detached: "Save the signature as detached",
    sign_error: "The signature is not valid",
    sign_info: "Signature information",
    sign_ok: "The signature is valid",
    sign_setting: "Signature settings",
    sign_time: "Add time of signature",
    signercert_not_found: "Error: signer cert not found",
    signingTime: "Signing time",
    status: "The status",
    unsign: "Remove a signature",
    verify: "Verify",
    verify_get_content_failed: "The original file is not found",
    verify_sign_failed: "Signature verification failed",
    verify_sign_founds_errors: "Errors were detected while verifying",
    verify_sign_ok: "The signature is successfully verified",
    verify_signercontent_founds_errors: "Error: signed content not found",
    verify_signers_failed: "Error: verify signers",
  },
};
